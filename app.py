# -*- coding: utf-8 -*-
"""stock_agent

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Idt1Ho-ytS9IK8PC8gtEI_7JE_TgD9yh
"""

import streamlit as st
from stock_agent import StockAnalysisAgent
import pandas as pd

# Set up the app
st.set_page_config(
    page_title="Stock Comparison Agent",
    page_icon="ðŸ“ˆ",
    layout="wide"
)

# Initialize the agent
agent = StockAnalysisAgent()

# App title and description
st.title("ðŸ“ˆ Stock Comparison Agent")
st.markdown("""
Compare financial metrics and news for any two stocks using this AI-powered agent.
""")

# Sidebar for user input
with st.sidebar:
    st.header("Input Parameters")
    ticker1 = st.text_input("First Stock Ticker", "TATAMOTORS.NS").upper()
    ticker2 = st.text_input("Second Stock Ticker", "M&M.BO").upper()
    st.markdown("""
    **Note:** For Indian stocks, use `.NS` (NSE) or `.BO` (BSE) suffix.
    For US stocks, just use the ticker (e.g., `AAPL`, `TSLA`).
    """)

# Main content area
tab1, tab2 = st.tabs(["Financial Comparison", "News Analysis"])

with tab1:
    st.header("Financial Metrics Comparison")
    if st.button("Compare Stocks"):
        with st.spinner("Fetching data and generating analysis..."):
            result = agent.generate_comparison(ticker1, ticker2)

            if result:
                # Display comparison table
                st.dataframe(
                    result['table'],
                    use_container_width=True,
                    hide_index=True,
                    column_config={
                        "Metric": st.column_config.Column(width="large"),
                        ticker1: ticker1,
                        ticker2: ticker2
                    }
                )

                # Simple analysis
                st.subheader("Quick Analysis")
                pe1 = result['table'].loc[2, ticker1]
                pe2 = result['table'].loc[2, ticker2]

                if pe1 != 'N/A' and pe2 != 'N/A':
                    pe1_val = float(pe1)
                    pe2_val = float(pe2)
                    if pe1_val < pe2_val:
                        st.info(f"ðŸ’° **Valuation:** {ticker1} has a lower P/E ratio ({pe1}) compared to {ticker2} ({pe2}), suggesting it may be relatively undervalued.")
                    else:
                        st.info(f"ðŸ’° **Valuation:** {ticker2} has a lower P/E ratio ({pe2}) compared to {ticker1} ({pe1}), suggesting it may be relatively undervalued.")

                reco1 = result['table'].loc[8, ticker1]
                reco2 = result['table'].loc[8, ticker2]
                st.info(f"ðŸ“Š **Analyst Consensus:** {ticker1} is rated '{reco1}' while {ticker2} is rated '{reco2}'")

                st.caption(f"Last updated: {result['last_update']}")

with tab2:
    st.header("Recent News Highlights")
    if st.button("Fetch News"):
        with st.spinner("Gathering latest news..."):
            result = agent.generate_comparison(ticker1, ticker2)

            if result:
                col1, col2 = st.columns(2)

                with col1:
                    st.subheader(ticker1)
                    if result['news'][ticker1]:
                        for item in result['news'][ticker1]:
                            st.markdown(f"""
                            <div style="
                                padding: 10px;
                                margin-bottom: 10px;
                                border-radius: 5px;
                                background-color: #f0f2f6;
                            ">
                                <a href="{item['link']}" target="_blank" style="color: inherit; text-decoration: none;">
                                    <b>{item['title']}</b><br>
                                    <small>{item['publisher']}</small>
                                </a>
                            </div>
                            """, unsafe_allow_html=True)
                    else:
                        st.warning("No recent news found")

                with col2:
                    st.subheader(ticker2)
                    if result['news'][ticker2]:
                        for item in result['news'][ticker2]:
                            st.markdown(f"""
                            <div style="
                                padding: 10px;
                                margin-bottom: 10px;
                                border-radius: 5px;
                                background-color: #f0f2f6;
                            ">
                                <a href="{item['link']}" target="_blank" style="color: inherit; text-decoration: none;">
                                    <b>{item['title']}</b><br>
                                    <small>{item['publisher']}</small>
                                </a>
                            </div>
                            """, unsafe_allow_html=True)
                    else:
                        st.warning("No recent news found")

                st.caption(f"Last updated: {result['last_update']}")

# Footer
st.markdown("---")
st.caption("""
This tool uses yfinance for stock data. News links may direct to Google search when original URLs are invalid.
""")